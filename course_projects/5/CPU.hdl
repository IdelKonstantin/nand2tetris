CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:

    //Если в op code -> 0, то это А-инструкция, ее загружжаем в следующий за
    //мультиплексором регистр А, если же 1, то это С-инструкция, берем команду 
    //выхода АЛУ
    Mux16(a = instruction, b = aluOut, sel = instruction[15], out = aRegIn);

    //Проверяем, что op code нулевой (это условие записи в регистр А) и 
    //что выбрана команда С и при этом dest указывает любую из команд на 
    //сохранение в регистр А и его варианты
    Not(in = instruction[15], out = isAcommand);
    Or(a = isAcommand, b = instruction[5], out = loadInAreg);

    //Регистр А на выходе выдает стразу и значение в себе (идет на вход АЛУ), 
    //и 15-разрядное число адреса регистра М
    ARegister(in = aRegIn, load = loadInAreg, out = aRegOut, out[0..14]=addressM);
    
    //В зависимости от поля "а" С-команды, на У-вход АЛУ подается,
    //либо регистр А (а == 0), либо регистр М (а == 1) 
    Mux16(a=aRegOut, b=inM, sel=instruction[12], out=yIn);

    //В регистр D записываются данные только, если d[2] (index 4) равен 1
    //и это С-команда:
    And(a = instruction[15], b = instruction[4], out = loadD);
    Register(in = aluOut, load = loadD, out = xIn);

    //Если d[3] = 1, то это означент, что надо записать данные в М.
    //При этом проверить, что выполняется С-команда:
    And(a=instruction[15], b=instruction[3], out=writeM);

    ALU(x=xIn,
        y=yIn,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=aluOut,
        out=outM,
        zr=zr,
        ng=ng);
    
    //Это сложная функция J, суть котрой - логика работы РС

    Not(in=zr, out=notZero);
    Not(in=ng, out=notNegative);
    And(a=notZero, b=notNegative, out=isPositive);

	//Flags to indicate how to jump
	And(a=instruction[0],b=isPositive,out=JumpBigger);
	And(a=instruction[1],b=zr,out=JumpEqual);
	And(a=instruction[2],b=ng,out=JumpLess);

	Or8Way(in[0]=JumpBigger,in[1]=JumpEqual,in[2]=JumpLess,in[3..7]=false,out=Jump1);
	And(a=Jump1,b=instruction[15],out=loadPC);

    PC(in=aRegOut, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
}